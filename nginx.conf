# Define the number of worker processes Nginx should use
worker_processes 1;  # '1' means it will only use one process, but this can be set to 'auto' for automatic scaling based on CPU cores.

# The 'events' block defines how Nginx handles incoming connections
events {
    worker_connections 1024;  # This allows each worker to handle 1024 connections (default is usually enough)
}

http {
    include mime.types;  # This includes the MIME types file that associates file extensions with content types (e.g., .html -> text/html)

    # The 'upstream' block defines the backend servers (your app instances)
    upstream nodejs_cluster {
        least_conn;  # 'least_conn' means Nginx will forward requests to the server with the least number of active connections
        server app1:3000;  # Nginx will forward requests to app1's container at port 3000
        server app2:3000;  # Nginx will forward requests to app2's container at port 3000
        server app3:3000;  # Nginx will forward requests to app3's container at port 3000
    }

    # This block defines the server's settings for HTTP requests
    server {
        listen 443 ssl;  # Nginx will listen on port 443 for incoming HTTPS traffic
        server_name localhost;  # The server will respond to requests sent to 'localhost' (or IP)

        # SSL Certificate and Key directives
        ssl_certificate /nginx-certs/nginx-selfsigned.crt;  # Path to the SSL certificate
        ssl_certificate_key /nginx-certs/nginx-selfsigned.key;  # Path to the SSL private key

        # This 'location' block defines how to handle requests that match '/'
        location / {
            # The 'proxy_pass' directive forwards incoming requests to the defined upstream block (nodejs_cluster)
            # Nginx will distribute requests to app1, app2, or app3 based on the load balancing method
            proxy_pass http://nodejs_cluster;  # Forward requests to the upstream cluster

            # These headers pass along important information from the original request
            proxy_set_header Host $host;  # Forward the original host header from the client request
            proxy_set_header X-Real-IP $remote_addr;  # Forward the real IP address of the client
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Chain the IP addresses in case of proxies
            proxy_set_header X-Forwarded-Proto $scheme;  # Forward the protocol (http or https) used by the client
        }
    }
}
